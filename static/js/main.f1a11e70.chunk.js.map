{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","value","initialState","query","status","filterReducer","filters","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispath","visibleTodos","useMemo","newTodos","completed","title","toLowerCase","includes","length","className","map","id","onClick","actionsCurrentTodo","changeCurrentTodo","TodoFilter","changeQuary","filterActions","onSubmit","event","preventDefault","onChange","target","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","isLoading","setIsLoading","useEffect","userId","finally","currentTodoActions","href","email","name","App","isLoadind","todoActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f1a11e70.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype StatusAction = { type: 'filter/STATUS'; payload: Status };\ntype QueryAction = { type: 'filter/QUERY'; payload: string };\ntype Action = StatusAction | QueryAction;\n\nconst status = (value: Status): StatusAction => ({\n  type: 'filter/STATUS',\n  payload: value,\n});\n\nconst query = (value: string): QueryAction => ({\n  type: 'filter/QUERY',\n  payload: value,\n});\n\nexport const actions = { status, query };\n\ntype State = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: State = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  filters: State = initialState,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'filter/STATUS':\n      return { ...filters, status: action.payload };\n    case 'filter/QUERY':\n      return { ...filters, query: action.payload };\n    default:\n      return filters;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype AddAction = {\n  type: 'todos/ADD';\n  payload: Todo[];\n};\n\ntype Action = AddAction;\n\nconst add = (todos: Todo[]): AddAction => ({\n  type: 'todos/ADD',\n  payload: todos,\n});\n\nexport const actions = { add };\n\nconst todosReducer = (todos: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/ADD':\n      return action.payload;\n    default:\n      return todos;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as actionsCurrentTodo } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\nexport const TodoList: React.FC = () => {\n  const dispath = useAppDispatch();\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n\n  const visibleTodos = useMemo(() => {\n    let newTodos = todos.filter(todo => {\n      switch (status) {\n        case 'active':\n          return !todo.completed;\n        case 'completed':\n          return todo.completed;\n        default:\n          return todo;\n      }\n    });\n\n    if (query) {\n      newTodos = newTodos.filter(todo => {\n        return todo.title.toLowerCase().includes(query.toLowerCase());\n      });\n    }\n\n    return newTodos;\n  }, [status, query, todos]);\n\n  const changeCurrentTodo = (todo: Todo) => {\n    dispath(actionsCurrentTodo.setTodo(todo));\n  };\n\n  if (!visibleTodos.length) {\n    return (\n      <p className=\"notification is-warning\">\n        There are no todos matching current filter criteria\n      </p>\n    );\n  }\n\n  return (\n    <>\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {visibleTodos.map(todo => (\n            <tr\n              data-cy=\"todo\"\n              key={todo.id}\n              className={todo.id === currentTodo?.id ? 'has-background-info-light' : ''}\n            >\n              <td className=\"is-vcentered\">{todo.id}</td>\n\n              <td className=\"is-vcentered\">\n                {todo.completed && (\n                  <span className=\"icon\" data-cy=\"iconCompleted\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n\n              <td className=\"is-vcentered is-expanded\">\n                <p className={todo.completed ? 'has-text-success' : 'has-text-danger'}>\n                  {todo.title}\n                </p>\n              </td>\n\n              <td className=\"has-text-right is-vcentered\">\n                {todo.id === currentTodo?.id ? (\n                  <button data-cy=\"selectButton\" className=\"button\" type=\"button\">\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye-slash\" />\n                    </span>\n                  </button>\n                ) : (\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => changeCurrentTodo(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i className=\"far fa-eye\" />\n                    </span>\n                  </button>\n                )}\n\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispath = useAppDispatch();\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n\n  const changeStatus = (value: Status) => {\n    dispath(filterActions.status(value));\n  };\n\n  const changeQuary = (value: string) => {\n    dispath(filterActions.query(value));\n  };\n\n  const clearQuery = () => changeQuary('');\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(event) => changeStatus(event.target.value as Status)}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(event => changeQuary(event.target.value))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={clearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\nexport const TodoModal: React.FC = () => {\n  const dispath = useAppDispatch();\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .finally(() => setIsLoading(false));\n    }\n  }, []);\n\n  const closeModal = () => dispath(currentTodoActions.removeTodo());\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? <Loader /> : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo?.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user?.email}`}>{user?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions as todoActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const dispath = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const [isLoadind, setIsLoading] = useState<boolean>(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then(todos => dispath(todoActions.add(todos)))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoadind\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}